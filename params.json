{"name":"Movie Database - websocket","tagline":"Seconds year college project. Sparse data and algorithms, instead of GUI there is websocket semantic UI client.","body":"# Movie DB - sparse data and algorithm assigment\r\n\r\nThis is college's 2nd year project. Focused on sparse data and recomending movies to you by ratings of other users with similar taste to yours. Instead of regular GUI decided to do browser UI in semanticUI and communicate to server over websockets with JSON.\r\n\r\n![first](https://raw.githubusercontent.com/truhlikfredy/commitsFromPrivateRepos/master/screenShootsDB/01.png)\r\n\r\n# Features\r\n* WebSocket server (**no** webserver included) tested on Linux.\r\n* Semantic UI webclient (tested on Linux / Windows browsers).\r\n* Instant responces thans to websockets.\r\n* No 3rd party database server required, supported data storage:\r\n  * Bytestream support\r\n  * CSV files support\r\n  * XML\r\n  * JSON\r\n* JavaDoc.\r\n* JUint tests\r\n* Search can lookup different fields, not just title\r\n  * Can search content while you type (not needed to press enter/go button)\r\n* Recomendations given depending on other users which are similar to your taste.\r\n  * Some aspects of this algortihm are cached for better speed performance\r\n* Own implementation of sorting / searching (no collection class used)\r\n* Using library which fills gap between primitive arrays and object collections.\r\n\r\n\r\n## Can display genres\r\n![UI](https://raw.githubusercontent.com/truhlikfredy/commitsFromPrivateRepos/master/screenShootsDB/02.png)\r\n\r\n\r\n## Can search genres\r\n![UI](https://raw.githubusercontent.com/truhlikfredy/commitsFromPrivateRepos/master/screenShootsDB/03.png)\r\n\r\n# Statistics\r\n\r\nNumber of            | Value   \r\n:--------------------| ------:\r\nClasses              |     15 \r\nMethods              |    175 \r\nLines of server code |   1933 \r\nLines of client code |    400\r\n\r\n## Displaying reccomendations\r\n![UI](https://raw.githubusercontent.com/truhlikfredy/commitsFromPrivateRepos/master/screenShootsDB/04.png)\r\n\r\n\r\n#How to run and use\r\n\r\n* Server: **./runServer.sh**\r\n* Client: (open in browser) **./web-client/index.htm** \r\nClient has to have direct file access to HTML files because there is no webserver included.\r\n\r\nCheck ./data/movies-users.csv to see users logins and passwords, but you can use \r\nuser pass:user to have regular user and admin pass:admin for administrator.\r\n\r\n#Additional assigment related informations\r\n\r\nBecause of the fact that usually you see more pages than give ratings. And often\r\non these pages are reccomendations. This means that more often you will read\r\nthe reccomendation than you will write. So I decided to calculated recomendations\r\nwhen change the data on write (giving rating) and keep stored results in cache.\r\n\r\nLike de-normalization of data in mongoDB and other no-SQL databases I decided to\r\nhave some data redudant just to get faster responses. And like google or twitter\r\nI decide to not give 100% of time 100% acurate results. Some results are cached\r\nand some processes stopped after \"good enough\" results so in case of big \r\ndatabase it doesn't have to proccess all users and movies each time. But will\r\nreturns acceptable results even they might be off from 100% acurate results.\r\nOne workable strategy could be to use cached in high load and high trafic situations,\r\nbut recalculate and populate caches with fresh data in off peak hours (maybe durning\r\nnight).\r\n\r\nRatings are kept in special format. Basicaly it's simple array of primitive types.\r\n\r\nInstead of Class Integer primitive type would int be used. But now we can save even\r\nmore and insted of int, just use byte. Score doesn't have to be 32bit (because int \r\nis 4x bigger and not needed). Plus not objects overhead saves performance & memorry\r\n as well. And they are designed as sparse data so no wasting no matter how many movies\r\nare in database.\r\n\r\nUsing libary meant for smaller footprint and\r\nfaster accessing. Ratings are kept as 2d vector format in almost empty matrix. So \r\neven if database is containing milion movies. If user rated just 10 movies, just 10 entries\r\nare kept in memorry. Some arrayList implementations resize to contain much more \r\nreserved entries for future adds. This one still is still between  the smallest\r\nones, but the speed is the fastest. Benchmark with HashMaps is here:\r\n\r\nhttp://cern.antonkrug.eu\r\n\r\nBecuase I kept 2 separate lists as form of 2d vector and they have to be kept \r\naligned. This means that I had to write my custom quick sort method. But then I \r\ncould use cerns binary search methods. These classes support of multiple levels \r\nof dirtines. For little bit dirty list a merge sort could be used, for worst case\r\nscenario quick sort is there.\r\n\r\nAs practice there is findGenreByName in DB class which is own binary search. \r\n\r\nI implemented cache which will stop after some threshold (so enough high marked \r\nmatched users were found). So in case the database would be huge this would stop\r\nand woudn't process everything. Then results are ordered and just the cache is \r\npopulated with the best ones (again it's possible to change and tweek these thersholds).\r\nEven this cache is keept for each user and it's limited in number, but populated with\r\ngood matches. This cache could be set dirty and purged it by admin. So you could\r\nforce to repopulate it from scratch maybe with new matches. Or just force existing\r\nmatches to update their matching score.\r\n\r\nFor future it's possible to be extended to contain very bad matches (negative \r\nones, if there is user which has exactly oposite taste in movies, this can be used\r\nand recomend exactly the movies he hates. And still yeld good results for your\r\nreccomendation.\r\n\r\nSome classes like Cache, Movie or MovieGenre have comparators, so you can sort them\r\nby natural order, by usage, ratings or other factors.\r\n\r\nSome classes have serialVersionUID. Generate new ID if you will change\r\nanything in this class, if you change stuff often then comment it out and let\r\nthe compiler generate one for you which will change automaticly if you will do\r\nany modifications to the class.\r\n\r\nCSV, XML, bytestream and JSON are used for data. CSV is meant for import even export\r\nis implemented (passwords encryption will lose plain text passwords).\r\n\r\nXML works as well, but the object references can make it into big file\r\nso bytestream is prefered and setup as default. JSON is used for API and supports \r\nAPI calls where it returns data in JSON, so other aplications can use this as data \r\ninport and export as well.\r\n\r\nRead the README file in ./bake folder for all shell script tools lincense.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}